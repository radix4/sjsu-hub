package com.sjsuhub.controllers;

import com.sjsuhub.entities.User;
import com.sjsuhub.repositories.UserRepository;

import org.apache.catalina.connector.Response;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

/**
 * APIs:
 *  1) Get all users: http://localhost:8080/demo/users/all
 *  2) Login: http://localhost:8080/demo/users/login
 *
 */

@RestController // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    //@CrossOrigin(origins = "http://localhost:3000")
    @PostMapping(path="/users/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestBody User user) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        String email = user.getEmail();
        User preExistingUser = userRepository.findByEmail(email);
        System.out.println("MainController.java addNewUser " + preExistingUser);
        if (preExistingUser != null) {
            return "Error! Email " + email + " is already registered. Would you like to login?";
        }
        else {
            n.setFirstName(user.getFirstName());
            n.setLastName(user.getLastName());
            n.setEmail(user.getEmail());
            n.setPassword(user.getPassword());
            userRepository.save(n);
            return "Success! User with email addresss " + email + " is now registered.";
        }
    }

    @PostMapping(path="/users/login")
    public @ResponseBody String login(@RequestBody User user){
        if (user.getEmail() == null|| user.getPassword() == null)
            return "Incomplete!";

        User n = userRepository.findByEmail(user.getEmail());

        if (n == null) return "User not found";

        if ((n.getEmail().equals(user.getEmail())) && (n.getPassword().equals(user.getPassword())))
            return "Login success.";
        else
            return "Wrong credentials!";
    }

    @GetMapping(path="/users/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}
